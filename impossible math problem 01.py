
##
##
##The sequence of triangle numbers is generated by adding the natural numbers.
##So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
##The first ten terms would be:
##
##1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
##
##Let us list the factors of the first seven triangle numbers:
##
##     1: 1
##     3: 1,3
##     6: 1,2,3,6
##    10: 1,2,5,10
##    15: 1,3,5,15
##    21: 1,3,7,21
##    28: 1,2,4,7,14,28
##
##We can see that 28 is the first triangle number to have over five divisors.
##
##What is the value of the first triangle number to have over five hundred divisors?


import math, time
start = time.clock()

#generate triangle numbers, variable upper bound
#generate list of primes, variable upper bound
#break down triangle number into list of prime divisors, compare with 500
#this can be done with Guess and Check rather than Sequential Iteration

def primeNumbers():
    cycles = 0
    primeList = [2, 3, 5, 7, 11, 13]
    checkNum = primeList[-1] + 2
    while checkNum < 7000000:
        checkNum += 2
        for i in primeList:
            cycles += 1
            if checkNum % i == 0:
                break
            if i > math.sqrt(checkNum):
                primeList.append(checkNum)
                break
    print("Primes loaded.  Prime time = " + str(time.clock() - start))
    return primeList

def triCompare():
    triNums = [1]

    for i in range(2, 200000000):
        triNums.append(i + triNums[-1])
    print("TriNums loaded.  Trime time = " + str(time.clock() - start))

    primeList = primeNumbers()

    tInd = 1000
    whileCounter = 0
    highIndex = 99999999
    lowIndex = 0
    while highIndex - lowIndex > 10:
        i = triNums[tInd]
        whileCounter += 1
        reduction = i
        primeFactors = [1, i]
        for j in primeList:
            if primeList[-1] < math.sqrt(reduction):
                return ("More Primes needed!  Last called Tri Num sq root = " + str(math.sqrt(triNums[tInd])))
            if j > math.sqrt(reduction):
                break
            elif reduction % j == 0:
                primeFactors.extend([j, int(reduction / j)])
                reduction = int(reduction / j)
        for j in primeFactors:
            for k in primeFactors:
                if i % (j * k) == 0 and j * k < primeFactors[1] and j * k not in primeFactors:
                    primeFactors.append(j * k)
                    if int(i / (j * k)) not in primeFactors:
                        primeFactors.append(int(i / (j * k)))
        print("TriNum = " + str(i) + ", factors = " + str(len(primeFactors)) + ", whileCounter = " + str(whileCounter) + ", tInd = " + str(tInd) + ", lowIndex = " + str(lowIndex) + ", highIndex = " + str(highIndex))
        if sum(1 for j in primeFactors) >= 500:
            highIndex = tInd
            tInd *= int(sum(1 for j in primeFactors) / 500)
        elif sum(1 for j in primeFactors) < 500:
            lowIndex = tInd
            tInd *= int( 500 / sum(1 for j in primeFactors))
    print("While counter = " + str(whileCounter))
    return triNums[highIndex]








##print("Cycles = " + str(cycles))
print("Compare Finished.  Returned Value: " + str(triCompare()))
print("Finish time = " + str(time.clock() - start) + " seconds")